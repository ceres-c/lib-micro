#!/usr/bin/env python3
XOR = """
#define XOR_DSZ64_IMM(dst, src, imm) \\
    ( _XOR_DSZ64 | DST_ENCODE(dst) | SRC0_ENCODE(src) | IMM_ENCODE_SRC1(imm) )
#define XOR_DSZ32_IMM(dst, src, imm) \\
    ( _XOR_DSZ32 | DST_ENCODE(dst) | SRC0_ENCODE(src) | IMM_ENCODE_SRC1(imm) )
#define XOR_DSZ16_IMM(dst, src, imm) \\
    ( _XOR_DSZ16 | DST_ENCODE(dst) | SRC0_ENCODE(src) | IMM_ENCODE_SRC1(imm) )
#define XOR_DSZ8_IMM(dst, src, imm) \\
    ( _XOR_DSZ8 | DST_ENCODE(dst) | SRC0_ENCODE(src) | IMM_ENCODE_SRC1(imm) )

#define XOR_DSZ64_REG(dst, src0, src1) \\
    ( _XOR_DSZ64 | DST_ENCODE(dst) | SRC0_ENCODE(src0) | SRC1_ENCODE(src1) )
#define XOR_DSZ32_REG(dst, src0, src1) \\
    ( _XOR_DSZ32 | DST_ENCODE(dst) | SRC0_ENCODE(src0) | SRC1_ENCODE(src1) )
#define XOR_DSZ16_REG(dst, src0, src1) \\
    ( _XOR_DSZ16 | DST_ENCODE(dst) | SRC0_ENCODE(src0) | SRC1_ENCODE(src1) )
#define XOR_DSZ8_REG(dst, src0, src1) \\
    ( _XOR_DSZ8 | DST_ENCODE(dst) | SRC0_ENCODE(src0) | SRC1_ENCODE(src1) )
"""

ops = ["ADD", "OR", "AND", "SUB", "XOR", "NOTAND", "ROL", "ROR", "RAS", "SHL", "SHR"]

for x in ops:
    print(XOR.replace("XOR", x).replace("_SUB", "_SUBR"))

UJMP = """
#define UJMPCC_DIRECT_NOTTAKEN_CONDZ(src, addr) \\
    ( _UJMPCC_DIRECT_NOTTAKEN_CONDZ | SRC0_ENCODE(src) | IMM_ENCODE_SRC1(addr) )
"""

cc_ops = ["UJMPCC_DIRECT_NOTTAKEN_CONDO", "UJMPCC_DIRECT_NOTTAKEN_CONDNO", "UJMPCC_DIRECT_NOTTAKEN_CONDB", "UJMPCC_DIRECT_NOTTAKEN_CONDNB", "UJMPCC_DIRECT_NOTTAKEN_CONDZ", "UJMPCC_DIRECT_NOTTAKEN_CONDNZ", "UJMPCC_DIRECT_NOTTAKEN_CONDBE", "UJMPCC_DIRECT_NOTTAKEN_CONDNBE", "UJMPCC_DIRECT_TAKEN_CONDZ", "UJMPCC_DIRECT_NOTTAKEN_CONDS", "UJMPCC_DIRECT_NOTTAKEN_CONDNS", "UJMPCC_DIRECT_NOTTAKEN_CONDP", "UJMPCC_DIRECT_NOTTAKEN_CONDNP", "UJMPCC_DIRECT_NOTTAKEN_CONDL", "UJMPCC_DIRECT_NOTTAKEN_CONDNL", "UJMPCC_DIRECT_NOTTAKEN_CONDLE", "UJMPCC_DIRECT_NOTTAKEN_CONDNLE"]

for x in cc_ops:
    print(UJMP.replace("UJMPCC_DIRECT_NOTTAKEN_CONDZ", x))
